/*
 * The information in this file is
 * Copyright(c) 2007 Ball Aerospace & Technologies Corporation
 * and is subject to the terms and conditions of the
 * GNU Lesser General Public License Version 2.1
 * The license text is available from   
 * http://www.gnu.org/licenses/lgpl.html
 */

#include "AppVersion.h"
#include "DataVariant.h"
#include "NitfConstants.h"
#include "NitfRadsdaParser.h"
#include "NitfUtilities.h"
#include "ObjectResource.h"
#include "PlugInRegistration.h"

#include <limits>
#include <sstream>

using namespace std;
using namespace Nitf;
using namespace Nitf::TRE;

REGISTER_PLUGIN(OpticksNitfCommonTre, RadsdaParser, Nitf::RadsdaParser());

Nitf::RadsdaParser::RadsdaParser()
{
   setName("RADSDA");
   setDescriptorId("{F097CF27-6FE2-4087-9140-050ADDD09C15}");
   setCreator("Ball Aerospace & Technologies Corp.");
   setCopyright(APP_COPYRIGHT);
   setProductionStatus(APP_IS_PRODUCTION_RELEASE);
}

bool Nitf::RadsdaParser::runAllTests(Progress* pProgress, ostream& failure)
{
   static const string data1(                    // Build unclassified test string
      "A234567"             // FIELD1
      "B23456789"           // FIELD2
      "C2345678"            // FIELD3
      "D23"                 // FIELD4
      "FIELD5         "     // FIELD5
      "F234567"             // FIELD6
      "12345"               // FIELD7
      "1"                   // FIELD8
      "FIELD9                  " // FIELD9
      "123456789"           // FIELD10
      "123456789"           // FIELD11
      "123456789"           // FIELD12
      "123456789"           // FIELD13
      "123456789"           // FIELD14
      "123456789"           // FIELD15
      "1234"                // FIELD16
      "1234.6"              // FIELD17
      "1234.6"              // FIELD18
      "1234"                // FIELD19
      "123.5"               // FIELD20
      "123.5"               // FIELD21
      "X2345"               // FIELD22
          // FIELD23 1536 bytes long
      "FIELD23                                                                                                        "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                             " // FIELD23
      "FLD45"           // FIELD24
          // FIELD25  1536 bytes long
      "FIELD25                                                                                                        "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                             " // FIELD25
      "FIELD26                 "   // FIELD26
      "FIELD27                            "  // FIELD27
      "12"              // FIELD28
      "1"               // FIELD29
      "12"              // FIELD30
      "1"               // FIELD31
      "1"               // FIELD32
      "12"              // FIELD33
      "1"               // FIELD34
      "12"              // FIELD35
      "12"              // FIELD36
      "1"               // FIELD37
      "12"              // FIELD38
      );


   static const string data2(                    // Build unclassified test string
      // for (i = 0; i < 50; ++i)
      "1234.6"          // FIELD39_01
      "1234.6"          // FIELD40_01
      "1234.6"          // FIELD41_01
      "1234.6"          // FIELD42_01
      "123.5"           // FIELD43_01
      "1234.6"          // FIELD44_01
      "1234.6"          // FIELD45_01
      "123.5"           // FIELD46_01

      "1234.6"          // FIELD39_02
      "1234.6"          // FIELD40_02
      "1234.6"          // FIELD41_02
      "1234.6"          // FIELD42_02
      "123.5"           // FIELD43_02
      "1234.6"          // FIELD44_02
      "1234.6"          // FIELD45_02
      "123.5"           // FIELD46_02

      "1234.6"          // FIELD39_03
      "1234.6"          // FIELD40_03
      "1234.6"          // FIELD41_03
      "1234.6"          // FIELD42_03
      "123.5"           // FIELD43_03
      "1234.6"          // FIELD44_03
      "1234.6"          // FIELD45_03
      "123.5"           // FIELD46_03

      "1234.6"          // FIELD39_04
      "1234.6"          // FIELD40_04
      "1234.6"          // FIELD41_04
      "1234.6"          // FIELD42_04
      "123.5"           // FIELD43_04
      "1234.6"          // FIELD44_04
      "1234.6"          // FIELD45_04
      "123.5"           // FIELD46_04

      "1234.6"          // FIELD39_05
      "1234.6"          // FIELD40_05
      "1234.6"          // FIELD41_05
      "1234.6"          // FIELD42_05
      "123.5"           // FIELD43_05
      "1234.6"          // FIELD44_05
      "1234.6"          // FIELD45_05
      "123.5"           // FIELD46_05

      "1234.6"          // FIELD39_06
      "1234.6"          // FIELD40_06
      "1234.6"          // FIELD41_06
      "1234.6"          // FIELD42_06
      "123.5"           // FIELD43_06
      "1234.6"          // FIELD44_06
      "1234.6"          // FIELD45_06
      "123.5"           // FIELD46_06

      "1234.6"          // FIELD39_07
      "1234.6"          // FIELD40_07
      "1234.6"          // FIELD41_07
      "1234.6"          // FIELD42_07
      "123.5"           // FIELD43_07
      "1234.6"          // FIELD44_07
      "1234.6"          // FIELD45_07
      "123.5"           // FIELD46_07

      "1234.6"          // FIELD39_08
      "1234.6"          // FIELD40_08
      "1234.6"          // FIELD41_08
      "1234.6"          // FIELD42_08
      "123.5"           // FIELD43_08
      "1234.6"          // FIELD44_08
      "1234.6"          // FIELD45_08
      "123.5"           // FIELD46_08

      "1234.6"          // FIELD39_09
      "1234.6"          // FIELD40_09
      "1234.6"          // FIELD41_09
      "1234.6"          // FIELD42_09
      "123.5"           // FIELD43_09
      "1234.6"          // FIELD44_09
      "1234.6"          // FIELD45_09
      "123.5"           // FIELD46_09

      "1234.6"          // FIELD39_10
      "1234.6"          // FIELD40_10
      "1234.6"          // FIELD41_10
      "1234.6"          // FIELD42_10
      "123.5"           // FIELD43_10
      "1234.6"          // FIELD44_10
      "1234.6"          // FIELD45_10
      "123.5"           // FIELD46_10

      "1234.6"          // FIELD39_11
      "1234.6"          // FIELD40_11
      "1234.6"          // FIELD41_11
      "1234.6"          // FIELD42_11
      "123.5"           // FIELD43_11
      "1234.6"          // FIELD44_11
      "1234.6"          // FIELD45_11
      "123.5"           // FIELD46_11

      "1234.6"          // FIELD39_12
      "1234.6"          // FIELD40_12
      "1234.6"          // FIELD41_12
      "1234.6"          // FIELD42_12
      "123.5"           // FIELD43_12
      "1234.6"          // FIELD44_12
      "1234.6"          // FIELD45_12
      "123.5"           // FIELD46_12

      "1234.6"          // FIELD39_13
      "1234.6"          // FIELD40_13
      "1234.6"          // FIELD41_13
      "1234.6"          // FIELD42_13
      "123.5"           // FIELD43_13
      "1234.6"          // FIELD44_13
      "1234.6"          // FIELD45_13
      "123.5"           // FIELD46_13

      "1234.6"          // FIELD39_14
      "1234.6"          // FIELD40_14
      "1234.6"          // FIELD41_14
      "1234.6"          // FIELD42_14
      "123.5"           // FIELD43_14
      "1234.6"          // FIELD44_14
      "1234.6"          // FIELD45_14
      "123.5"           // FIELD46_14

      "1234.6"          // FIELD39_15
      "1234.6"          // FIELD40_15
      "1234.6"          // FIELD41_15
      "1234.6"          // FIELD42_15
      "123.5"           // FIELD43_15
      "1234.6"          // FIELD44_15
      "1234.6"          // FIELD45_15
      "123.5"           // FIELD46_15

      "1234.6"          // FIELD39_16
      "1234.6"          // FIELD40_16
      "1234.6"          // FIELD41_16
      "1234.6"          // FIELD42_16
      "123.5"           // FIELD43_16
      "1234.6"          // FIELD44_16
      "1234.6"          // FIELD45_16
      "123.5"           // FIELD46_16

      "1234.6"          // FIELD39_17
      "1234.6"          // FIELD40_17
      "1234.6"          // FIELD41_17
      "1234.6"          // FIELD42_17
      "123.5"           // FIELD43_17
      "1234.6"          // FIELD44_17
      "1234.6"          // FIELD45_17
      "123.5"           // FIELD46_17

      "1234.6"          // FIELD39_18
      "1234.6"          // FIELD40_18
      "1234.6"          // FIELD41_18
      "1234.6"          // FIELD42_18
      "123.5"           // FIELD43_18
      "1234.6"          // FIELD44_18
      "1234.6"          // FIELD45_18
      "123.5"           // FIELD46_18

      "1234.6"          // FIELD39_19
      "1234.6"          // FIELD40_19
      "1234.6"          // FIELD41_19
      "1234.6"          // FIELD42_19
      "123.5"           // FIELD43_19
      "1234.6"          // FIELD44_19
      "1234.6"          // FIELD45_19
      "123.5"           // FIELD46_19

      "1234.6"          // FIELD39_20
      "1234.6"          // FIELD40_20
      "1234.6"          // FIELD41_20
      "1234.6"          // FIELD42_20
      "123.5"           // FIELD43_20
      "1234.6"          // FIELD44_20
      "1234.6"          // FIELD45_20
      "123.5"           // FIELD46_20

      "1234.6"          // FIELD39_21
      "1234.6"          // FIELD40_21
      "1234.6"          // FIELD41_21
      "1234.6"          // FIELD42_21
      "123.5"           // FIELD43_21
      "1234.6"          // FIELD44_21
      "1234.6"          // FIELD45_21
      "123.5"           // FIELD46_21

      "1234.6"          // FIELD39_22
      "1234.6"          // FIELD40_22
      "1234.6"          // FIELD41_22
      "1234.6"          // FIELD42_22
      "123.5"           // FIELD43_22
      "1234.6"          // FIELD44_22
      "1234.6"          // FIELD45_22
      "123.5"           // FIELD46_22

      "1234.6"          // FIELD39_23
      "1234.6"          // FIELD40_23
      "1234.6"          // FIELD41_23
      "1234.6"          // FIELD42_23
      "123.5"           // FIELD43_23
      "1234.6"          // FIELD44_23
      "1234.6"          // FIELD45_23
      "123.5"           // FIELD46_23

      "1234.6"          // FIELD39_24
      "1234.6"          // FIELD40_24
      "1234.6"          // FIELD41_24
      "1234.6"          // FIELD42_24
      "123.5"           // FIELD43_24
      "1234.6"          // FIELD44_24
      "1234.6"          // FIELD45_24
      "123.5"           // FIELD46_24

      "1234.6"          // FIELD39_25
      "1234.6"          // FIELD40_25
      "1234.6"          // FIELD41_25
      "1234.6"          // FIELD42_25
      "123.5"           // FIELD43_25
      "1234.6"          // FIELD44_25
      "1234.6"          // FIELD45_25
      "123.5"           // FIELD46_25

      "1234.6"          // FIELD39_26
      "1234.6"          // FIELD40_26
      "1234.6"          // FIELD41_26
      "1234.6"          // FIELD42_26
      "123.5"           // FIELD43_26
      "1234.6"          // FIELD44_26
      "1234.6"          // FIELD45_26
      "123.5"           // FIELD46_26

      "1234.6"          // FIELD39_27
      "1234.6"          // FIELD40_27
      "1234.6"          // FIELD41_27
      "1234.6"          // FIELD42_27
      "123.5"           // FIELD43_27
      "1234.6"          // FIELD44_27
      "1234.6"          // FIELD45_27
      "123.5"           // FIELD46_27

      "1234.6"          // FIELD39_28
      "1234.6"          // FIELD40_28
      "1234.6"          // FIELD41_28
      "1234.6"          // FIELD42_28
      "123.5"           // FIELD43_28
      "1234.6"          // FIELD44_28
      "1234.6"          // FIELD45_28
      "123.5"           // FIELD46_28

      "1234.6"          // FIELD39_29
      "1234.6"          // FIELD40_29
      "1234.6"          // FIELD41_29
      "1234.6"          // FIELD42_29
      "123.5"           // FIELD43_29
      "1234.6"          // FIELD44_29
      "1234.6"          // FIELD45_29
      "123.5"           // FIELD46_29

      "1234.6"          // FIELD39_30
      "1234.6"          // FIELD40_30
      "1234.6"          // FIELD41_30
      "1234.6"          // FIELD42_30
      "123.5"           // FIELD43_30
      "1234.6"          // FIELD44_30
      "1234.6"          // FIELD45_30
      "123.5"           // FIELD46_30

      "1234.6"          // FIELD39_31
      "1234.6"          // FIELD40_31
      "1234.6"          // FIELD41_31
      "1234.6"          // FIELD42_31
      "123.5"           // FIELD43_31
      "1234.6"          // FIELD44_31
      "1234.6"          // FIELD45_31
      "123.5"           // FIELD46_31

      "1234.6"          // FIELD39_32
      "1234.6"          // FIELD40_32
      "1234.6"          // FIELD41_32
      "1234.6"          // FIELD42_32
      "123.5"           // FIELD43_32
      "1234.6"          // FIELD44_32
      "1234.6"          // FIELD45_32
      "123.5"           // FIELD46_32

      "1234.6"          // FIELD39_33
      "1234.6"          // FIELD40_33
      "1234.6"          // FIELD41_33
      "1234.6"          // FIELD42_33
      "123.5"           // FIELD43_33
      "1234.6"          // FIELD44_33
      "1234.6"          // FIELD45_33
      "123.5"           // FIELD46_33

      "1234.6"          // FIELD39_34
      "1234.6"          // FIELD40_34
      "1234.6"          // FIELD41_34
      "1234.6"          // FIELD42_34
      "123.5"           // FIELD43_34
      "1234.6"          // FIELD44_34
      "1234.6"          // FIELD45_34
      "123.5"           // FIELD46_34

      "1234.6"          // FIELD39_35
      "1234.6"          // FIELD40_35
      "1234.6"          // FIELD41_35
      "1234.6"          // FIELD42_35
      "123.5"           // FIELD43_35
      "1234.6"          // FIELD44_35
      "1234.6"          // FIELD45_35
      "123.5"           // FIELD46_35

      "1234.6"          // FIELD39_36
      "1234.6"          // FIELD40_36
      "1234.6"          // FIELD41_36
      "1234.6"          // FIELD42_36
      "123.5"           // FIELD43_36
      "1234.6"          // FIELD44_36
      "1234.6"          // FIELD45_36
      "123.5"           // FIELD46_36

      "1234.6"          // FIELD39_37
      "1234.6"          // FIELD40_37
      "1234.6"          // FIELD41_37
      "1234.6"          // FIELD42_37
      "123.5"           // FIELD43_37
      "1234.6"          // FIELD44_37
      "1234.6"          // FIELD45_37
      "123.5"           // FIELD46_37

      "1234.6"          // FIELD39_38
      "1234.6"          // FIELD40_38
      "1234.6"          // FIELD41_38
      "1234.6"          // FIELD42_38
      "123.5"           // FIELD43_38
      "1234.6"          // FIELD44_38
      "1234.6"          // FIELD45_38
      "123.5"           // FIELD46_38

      "1234.6"          // FIELD39_39
      "1234.6"          // FIELD40_39
      "1234.6"          // FIELD41_39
      "1234.6"          // FIELD42_39
      "123.5"           // FIELD43_39
      "1234.6"          // FIELD44_39
      "1234.6"          // FIELD45_39
      "123.5"           // FIELD46_39

      "1234.6"          // FIELD39_40
      "1234.6"          // FIELD40_40
      "1234.6"          // FIELD41_40
      "1234.6"          // FIELD42_40
      "123.5"           // FIELD43_40
      "1234.6"          // FIELD44_40
      "1234.6"          // FIELD45_40
      "123.5"           // FIELD46_40

      "1234.6"          // FIELD39_41
      "1234.6"          // FIELD40_41
      "1234.6"          // FIELD41_41
      "1234.6"          // FIELD42_41
      "123.5"           // FIELD43_41
      "1234.6"          // FIELD44_41
      "1234.6"          // FIELD45_41
      "123.5"           // FIELD46_41

      "1234.6"          // FIELD39_42
      "1234.6"          // FIELD40_42
      "1234.6"          // FIELD41_42
      "1234.6"          // FIELD42_42
      "123.5"           // FIELD43_42
      "1234.6"          // FIELD44_42
      "1234.6"          // FIELD45_42
      "123.5"           // FIELD46_42

      "1234.6"          // FIELD39_43
      "1234.6"          // FIELD40_43
      "1234.6"          // FIELD41_43
      "1234.6"          // FIELD42_43
      "123.5"           // FIELD43_43
      "1234.6"          // FIELD44_43
      "1234.6"          // FIELD45_43
      "123.5"           // FIELD46_43

      "1234.6"          // FIELD39_44
      "1234.6"          // FIELD40_44
      "1234.6"          // FIELD41_44
      "1234.6"          // FIELD42_44
      "123.5"           // FIELD43_44
      "1234.6"          // FIELD44_44
      "1234.6"          // FIELD45_44
      "123.5"           // FIELD46_44

      "1234.6"          // FIELD39_45
      "1234.6"          // FIELD40_45
      "1234.6"          // FIELD41_45
      "1234.6"          // FIELD42_45
      "123.5"           // FIELD43_45
      "1234.6"          // FIELD44_45
      "1234.6"          // FIELD45_45
      "123.5"           // FIELD46_45

      "1234.6"          // FIELD39_46
      "1234.6"          // FIELD40_46
      "1234.6"          // FIELD41_46
      "1234.6"          // FIELD42_46
      "123.5"           // FIELD43_46
      "1234.6"          // FIELD44_46
      "1234.6"          // FIELD45_46
      "123.5"           // FIELD46_46

      "1234.6"          // FIELD39_47
      "1234.6"          // FIELD40_47
      "1234.6"          // FIELD41_47
      "1234.6"          // FIELD42_47
      "123.5"           // FIELD43_47
      "1234.6"          // FIELD44_47
      "1234.6"          // FIELD45_47
      "123.5"           // FIELD46_47

      "1234.6"          // FIELD39_48
      "1234.6"          // FIELD40_48
      "1234.6"          // FIELD41_48
      "1234.6"          // FIELD42_48
      "123.5"           // FIELD43_48
      "1234.6"          // FIELD44_48
      "1234.6"          // FIELD45_48
      "123.5"           // FIELD46_48

      "1234.6"          // FIELD39_49
      "1234.6"          // FIELD40_49
      "1234.6"          // FIELD41_49
      "1234.6"          // FIELD42_49
      "123.5"           // FIELD43_49
      "1234.6"          // FIELD44_49
      "1234.6"          // FIELD45_49
      "123.5"           // FIELD46_49

      "1234.6"          // FIELD39_50
      "1234.6"          // FIELD40_50
      "1234.6"          // FIELD41_50
      "1234.6"          // FIELD42_50
      "123.5"           // FIELD43_50
      "1234.6"          // FIELD44_50
      "1234.6"          // FIELD45_50
      "123.5"           // FIELD46_50

      // end for (i = 0; i < 50; ++i)

      "FIELD47                                              " // FIELD47
      "123.5"           // FIELD48
      "123"             // FIELD49
      "1234"            // FIELD50
      "1234"            // FIELD51
      "1234"            // FIELD52

      // for (i = 0; i < 9; ++i)

      "1234567.9"       // FIELD53_01
      "1234567"         // FIELD54_01
      "1234567"         // FIELD55_01
      "1234567"         // FIELD56_01
      "1234567"         // FIELD57_01
      "12"              // FIELD58_01
      "12"              // FIELD59_01
      "RW"              // FIELD60_01
      "B"               // FIELD61_01
      "123456"          // FIELD62_01
      "1234"            // FIELD63_01
      "1234"            // FIELD64_01
      "123"             // FIELD65_01
      "123"             // FIELD66_01
      "123"             // FIELD67_01

      "1234567.9"       // FIELD53_02
      "1234567"         // FIELD54_02
      "1234567"         // FIELD55_02
      "1234567"         // FIELD56_02
      "1234567"         // FIELD57_02
      "12"              // FIELD58_02
      "12"              // FIELD59_02
      "RW"              // FIELD60_02
      "B"               // FIELD61_02
      "123456"          // FIELD62_02
      "1234"            // FIELD63_02
      "1234"            // FIELD64_02
      "123"             // FIELD65_02
      "123"             // FIELD66_02
      "123"             // FIELD67_02

      "1234567.9"       // FIELD53_03
      "1234567"         // FIELD54_03
      "1234567"         // FIELD55_03
      "1234567"         // FIELD56_03
      "1234567"         // FIELD57_03
      "12"              // FIELD58_03
      "12"              // FIELD59_03
      "RW"              // FIELD60_03
      "B"               // FIELD61_03
      "123456"          // FIELD62_03
      "1234"            // FIELD63_03
      "1234"            // FIELD64_03
      "123"             // FIELD65_03
      "123"             // FIELD66_03
      "123"             // FIELD67_03

      "1234567.9"       // FIELD53_04
      "1234567"         // FIELD54_04
      "1234567"         // FIELD55_04
      "1234567"         // FIELD56_04
      "1234567"         // FIELD57_04
      "12"              // FIELD58_04
      "12"              // FIELD59_04
      "RW"              // FIELD60_04
      "B"               // FIELD61_04
      "123456"          // FIELD62_04
      "1234"            // FIELD63_04
      "1234"            // FIELD64_04
      "123"             // FIELD65_04
      "123"             // FIELD66_04
      "123"             // FIELD67_04

      "1234567.9"       // FIELD53_05
      "1234567"         // FIELD54_05
      "1234567"         // FIELD55_05
      "1234567"         // FIELD56_05
      "1234567"         // FIELD57_05
      "12"              // FIELD58_05
      "12"              // FIELD59_05
      "RW"              // FIELD60_05
      "B"               // FIELD61_05
      "123456"          // FIELD62_05
      "1234"            // FIELD63_05
      "1234"            // FIELD64_05
      "123"             // FIELD65_05
      "123"             // FIELD66_05
      "123"             // FIELD67_05

      "1234567.9"       // FIELD53_06
      "1234567"         // FIELD54_06
      "1234567"         // FIELD55_06
      "1234567"         // FIELD56_06
      "1234567"         // FIELD57_06
      "12"              // FIELD58_06
      "12"              // FIELD59_06
      "RW"              // FIELD60_06
      "B"               // FIELD61_06
      "123456"          // FIELD62_06
      "1234"            // FIELD63_06
      "1234"            // FIELD64_06
      "123"             // FIELD65_06
      "123"             // FIELD66_06
      "123"             // FIELD67_06

      "1234567.9"       // FIELD53_07
      "1234567"         // FIELD54_07
      "1234567"         // FIELD55_07
      "1234567"         // FIELD56_07
      "1234567"         // FIELD57_07
      "12"              // FIELD58_07
      "12"              // FIELD59_07
      "RW"              // FIELD60_07
      "B"               // FIELD61_07
      "123456"          // FIELD62_07
      "1234"            // FIELD63_07
      "1234"            // FIELD64_07
      "123"             // FIELD65_07
      "123"             // FIELD66_07
      "123"             // FIELD67_07

      "1234567.9"       // FIELD53_08
      "1234567"         // FIELD54_08
      "1234567"         // FIELD55_08
      "1234567"         // FIELD56_08
      "1234567"         // FIELD57_08
      "12"              // FIELD58_08
      "12"              // FIELD59_08
      "RW"              // FIELD60_08
      "B"               // FIELD61_08
      "123456"          // FIELD62_08
      "1234"            // FIELD63_08
      "1234"            // FIELD64_08
      "123"             // FIELD65_08
      "123"             // FIELD66_08
      "123"             // FIELD67_08

      "1234567.9"       // FIELD53_09
      "1234567"         // FIELD54_09
      "1234567"         // FIELD55_09
      "1234567"         // FIELD56_09
      "1234567"         // FIELD57_09
      "12"              // FIELD58_09
      "12"              // FIELD59_09
      "RW"              // FIELD60_09
      "B"               // FIELD61_09
      "123456"          // FIELD62_09
      "1234"            // FIELD63_09
      "1234"            // FIELD64_09
      "123"             // FIELD65_09
      "123"             // FIELD66_09
      "123"             // FIELD67_09

      // end for (i = 0; i < 9; ++i)

      "1234"            // FIELD68
      "1234"            // FIELD69
      "123"             // FIELD70

      // for (i = 0; i < 5; ++i)

      "1234567890123456789.1"   // FIELD71_01
      "1234567890123456789.1"   // FIELD72_01
      "1234567890123456789.1"   // FIELD73_01
      "1234567890123456789.1"   // FIELD74_01
      "1234567890123456789.1"   // FIELD75_01
      "123456789.12"            // FIELD76_01
      "123456789.12"            // FIELD77_01
      "123456789.12"            // FIELD78_01
      "123456789.12"            // FIELD79_01
      "123456789.12"            // FIELD80_01
      "123456789.12"            // FIELD81_01
      "123456789.12"            // FIELD82_01
      "123456789.12"            // FIELD83_01
      "123456789.12"            // FIELD84_01
      "123456789.12"            // FIELD85_01
      "123456789.12"            // FIELD86_01
      "123456789.12"            // FIELD87_01
      "123456789.12"            // FIELD88_01
      "123456789.12"            // FIELD89_01
      "123456789.12"            // FIELD90_01
      "123456789.12"            // FIELD91_01
      "123456789.12"            // FIELD92_01
      "123456789.12"            // FIELD93_01

      "1234567890123456789.1"   // FIELD71_02
      "1234567890123456789.1"   // FIELD72_02
      "1234567890123456789.1"   // FIELD73_02
      "1234567890123456789.1"   // FIELD74_02
      "1234567890123456789.1"   // FIELD75_02
      "123456789.12"            // FIELD76_02
      "123456789.12"            // FIELD77_02
      "123456789.12"            // FIELD78_02
      "123456789.12"            // FIELD79_02
      "123456789.12"            // FIELD80_02
      "123456789.12"            // FIELD81_02
      "123456789.12"            // FIELD82_02
      "123456789.12"            // FIELD83_02
      "123456789.12"            // FIELD84_02
      "123456789.12"            // FIELD85_02
      "123456789.12"            // FIELD86_02
      "123456789.12"            // FIELD87_02
      "123456789.12"            // FIELD88_02
      "123456789.12"            // FIELD89_02
      "123456789.12"            // FIELD90_02
      "123456789.12"            // FIELD91_02
      "123456789.12"            // FIELD92_02
      "123456789.12"            // FIELD93_02

      "1234567890123456789.1"   // FIELD71_03
      "1234567890123456789.1"   // FIELD72_03
      "1234567890123456789.1"   // FIELD73_03
      "1234567890123456789.1"   // FIELD74_03
      "1234567890123456789.1"   // FIELD75_03
      "123456789.12"            // FIELD76_03
      "123456789.12"            // FIELD77_03
      "123456789.12"            // FIELD78_03
      "123456789.12"            // FIELD79_03
      "123456789.12"            // FIELD80_03
      "123456789.12"            // FIELD81_03
      "123456789.12"            // FIELD82_03
      "123456789.12"            // FIELD83_03
      "123456789.12"            // FIELD84_03
      "123456789.12"            // FIELD85_03
      "123456789.12"            // FIELD86_03
      "123456789.12"            // FIELD87_03
      "123456789.12"            // FIELD88_03
      "123456789.12"            // FIELD89_03
      "123456789.12"            // FIELD90_03
      "123456789.12"            // FIELD91_03
      "123456789.12"            // FIELD92_03
      "123456789.12"            // FIELD93_03

      "1234567890123456789.1"   // FIELD71_04
      "1234567890123456789.1"   // FIELD72_04
      "1234567890123456789.1"   // FIELD73_04
      "1234567890123456789.1"   // FIELD74_04
      "1234567890123456789.1"   // FIELD75_04
      "123456789.12"            // FIELD76_04
      "123456789.12"            // FIELD77_04
      "123456789.12"            // FIELD78_04
      "123456789.12"            // FIELD79_04
      "123456789.12"            // FIELD80_04
      "123456789.12"            // FIELD81_04
      "123456789.12"            // FIELD82_04
      "123456789.12"            // FIELD83_04
      "123456789.12"            // FIELD84_04
      "123456789.12"            // FIELD85_04
      "123456789.12"            // FIELD86_04
      "123456789.12"            // FIELD87_04
      "123456789.12"            // FIELD88_04
      "123456789.12"            // FIELD89_04
      "123456789.12"            // FIELD90_04
      "123456789.12"            // FIELD91_04
      "123456789.12"            // FIELD92_04
      "123456789.12"            // FIELD93_04

      "1234567890123456789.1"   // FIELD71_05
      "1234567890123456789.1"   // FIELD72_05
      "1234567890123456789.1"   // FIELD73_05
      "1234567890123456789.1"   // FIELD74_05
      "1234567890123456789.1"   // FIELD75_05
      "123456789.12"            // FIELD76_05
      "123456789.12"            // FIELD77_05
      "123456789.12"            // FIELD78_05
      "123456789.12"            // FIELD79_05
      "123456789.12"            // FIELD80_05
      "123456789.12"            // FIELD81_05
      "123456789.12"            // FIELD82_05
      "123456789.12"            // FIELD83_05
      "123456789.12"            // FIELD84_05
      "123456789.12"            // FIELD85_05
      "123456789.12"            // FIELD86_05
      "123456789.12"            // FIELD87_05
      "123456789.12"            // FIELD88_05
      "123456789.12"            // FIELD89_05
      "123456789.12"            // FIELD90_05
      "123456789.12"            // FIELD91_05
      "123456789.12"            // FIELD92_05
      "123456789.12"            // FIELD93_05

      // end for (i = 0; i < 5; ++i)
      );

   static const string data_error1 (                    // Build unclassified ERROR test string
      "A234567"             // FIELD1
      "B23456789"           // FIELD2
      "C2345678"            // FIELD3
      "D23"                 // FIELD4
      "FIELD5         "     // FIELD5
      "F234567"             // FIELD6
      "12G45"               // FIELD7     // ERROR: should be numeric only
      "1"                   // FIELD8
      "FIELD9                  " // FIELD9
      "123456789"           // FIELD10
      "123456789"           // FIELD11
      "123456789"           // FIELD12
      "123456789"           // FIELD13
      "123456789"           // FIELD14
      "123456789"           // FIELD15
      "1234"                // FIELD16
      "1234.6"              // FIELD17
      "1234.6"              // FIELD18
      "1234"                // FIELD19
      "123.5"               // FIELD20
      "123.5"               // FIELD21
      "X2345"               // FIELD22
          // FIELD23 1536 bytes long
      "FIELD23                                                                                                        "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                             " // FIELD23
      "FLD45"           // FIELD24
          // FIELD25 1536 bytes long
      "FIELD25                                                                                                        "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                                               "
      "                                                                                             " // FIELD25
      "FIELD26                 "   // FIELD26
      "FIELD27                            "  // FIELD27
      "12"              // FIELD28
      "1"               // FIELD29
      "12"              // FIELD30
      "1"               // FIELD31
      "1"               // FIELD32
      "12"              // FIELD33
      "1"               // FIELD34
      "12"              // FIELD35
      "12"              // FIELD36
      "1"               // FIELD37
      "12"              // FIELD38
      );


   static const string data_error2(                    // Build unclassified test string
      // for (i = 0; i < 50; ++i)
      "1234.6"          // FIELD39_01
      "1234.6"          // FIELD40_01
      "1234.6"          // FIELD41_01
      "1234.6"          // FIELD42_01
      "123.5"           // FIELD43_01
      "1234.6"          // FIELD44_01
      "1234.6"          // FIELD45_01
      "123.5"           // FIELD46_01

      "1234.6"          // FIELD39_02
      "1234.6"          // FIELD40_02
      "1234.6"          // FIELD41_02
      "1234.6"          // FIELD42_02
      "123.5"           // FIELD43_02
      "1234.6"          // FIELD44_02
      "1234.6"          // FIELD45_02
      "123.5"           // FIELD46_02

      "1234.6"          // FIELD39_03
      "1234.6"          // FIELD40_03
      "1234.6"          // FIELD41_03
      "1234.6"          // FIELD42_03
      "123.5"           // FIELD43_03
      "1234.6"          // FIELD44_03
      "1234.6"          // FIELD45_03
      "123.5"           // FIELD46_03

      "1234.6"          // FIELD39_04
      "1234.6"          // FIELD40_04
      "1234.6"          // FIELD41_04
      "1234.6"          // FIELD42_04
      "123.5"           // FIELD43_04
      "1234.6"          // FIELD44_04
      "1234.6"          // FIELD45_04
      "123.5"           // FIELD46_04

      "1234.6"          // FIELD39_05
      "1234.6"          // FIELD40_05
      "1234.6"          // FIELD41_05
      "1234.6"          // FIELD42_05
      "123.5"           // FIELD43_05
      "1234.6"          // FIELD44_05
      "1234.6"          // FIELD45_05
      "123.5"           // FIELD46_05

      "1234.6"          // FIELD39_06
      "1234.6"          // FIELD40_06
      "1234.6"          // FIELD41_06
      "1234.6"          // FIELD42_06
      "123.5"           // FIELD43_06
      "1234.6"          // FIELD44_06
      "1234.6"          // FIELD45_06
      "123.5"           // FIELD46_06

      "1234.6"          // FIELD39_07
      "1234.6"          // FIELD40_07
      "1234.6"          // FIELD41_07
      "1234.6"          // FIELD42_07
      "123.5"           // FIELD43_07
      "1234.6"          // FIELD44_07
      "1234.6"          // FIELD45_07
      "123.5"           // FIELD46_07

      "1234.6"          // FIELD39_08
      "1234.6"          // FIELD40_08
      "1234.6"          // FIELD41_08
      "1234.6"          // FIELD42_08
      "123.5"           // FIELD43_08
      "1234.6"          // FIELD44_08
      "1234.6"          // FIELD45_08
      "123.5"           // FIELD46_08

      "1234.6"          // FIELD39_09
      "1234.6"          // FIELD40_09
      "1234.6"          // FIELD41_09
      "1234.6"          // FIELD42_09
      "123.5"           // FIELD43_09
      "1234.6"          // FIELD44_09
      "1234.6"          // FIELD45_09
      "123.5"           // FIELD46_09

      "1234.6"          // FIELD39_10
      "1234.6"          // FIELD40_10
      "1234.6"          // FIELD41_10
      "1234.6"          // FIELD42_10
      "123.5"           // FIELD43_10
      "1234.6"          // FIELD44_10
      "1234.6"          // FIELD45_10
      "123.5"           // FIELD46_10

      "1234.6"          // FIELD39_11
      "1234.6"          // FIELD40_11
      "1234.6"          // FIELD41_11
      "1234.6"          // FIELD42_11
      "123.5"           // FIELD43_11
      "1234.6"          // FIELD44_11
      "1234.6"          // FIELD45_11
      "123.5"           // FIELD46_11

      "1234.6"          // FIELD39_12
      "1234.6"          // FIELD40_12
      "1234.6"          // FIELD41_12
      "1234.6"          // FIELD42_12
      "123.5"           // FIELD43_12
      "1234.6"          // FIELD44_12
      "1234.6"          // FIELD45_12
      "123.5"           // FIELD46_12

      "1234.6"          // FIELD39_13
      "1234.6"          // FIELD40_13
      "1234.6"          // FIELD41_13
      "1234.6"          // FIELD42_13
      "123.5"           // FIELD43_13
      "1234.6"          // FIELD44_13
      "1234.6"          // FIELD45_13
      "123.5"           // FIELD46_13

      "1234.6"          // FIELD39_14
      "1234.6"          // FIELD40_14
      "1234.6"          // FIELD41_14
      "1234.6"          // FIELD42_14
      "123.5"           // FIELD43_14
      "1234.6"          // FIELD44_14
      "1234.6"          // FIELD45_14
      "123.5"           // FIELD46_14

      "1234.6"          // FIELD39_15
      "1234.6"          // FIELD40_15
      "1234.6"          // FIELD41_15
      "1234.6"          // FIELD42_15
      "123.5"           // FIELD43_15
      "1234.6"          // FIELD44_15
      "1234.6"          // FIELD45_15
      "123.5"           // FIELD46_15

      "1234.6"          // FIELD39_16
      "1234.6"          // FIELD40_16
      "1234.6"          // FIELD41_16
      "1234.6"          // FIELD42_16
      "123.5"           // FIELD43_16
      "1234.6"          // FIELD44_16
      "1234.6"          // FIELD45_16
      "123.5"           // FIELD46_16

      "1234.6"          // FIELD39_17
      "1234.6"          // FIELD40_17
      "1234.6"          // FIELD41_17
      "1234.6"          // FIELD42_17
      "123.5"           // FIELD43_17
      "1234.6"          // FIELD44_17
      "1234.6"          // FIELD45_17
      "123.5"           // FIELD46_17

      "1234.6"          // FIELD39_18
      "1234.6"          // FIELD40_18
      "1234.6"          // FIELD41_18
      "1234.6"          // FIELD42_18
      "123.5"           // FIELD43_18
      "1234.6"          // FIELD44_18
      "1234.6"          // FIELD45_18
      "123.5"           // FIELD46_18

      "1234.6"          // FIELD39_19
      "1234.6"          // FIELD40_19
      "1234.6"          // FIELD41_19
      "1234.6"          // FIELD42_19
      "123.5"           // FIELD43_19
      "1234.6"          // FIELD44_19
      "1234.6"          // FIELD45_19
      "123.5"           // FIELD46_19

      "1234.6"          // FIELD39_20
      "1234.6"          // FIELD40_20
      "1234.6"          // FIELD41_20
      "1234.6"          // FIELD42_20
      "123.5"           // FIELD43_20
      "1234.6"          // FIELD44_20
      "1234.6"          // FIELD45_20
      "123.5"           // FIELD46_20

      "1234.6"          // FIELD39_21
      "1234.6"          // FIELD40_21
      "1234.6"          // FIELD41_21
      "1234.6"          // FIELD42_21
      "123.5"           // FIELD43_21
      "1234.6"          // FIELD44_21
      "1234.6"          // FIELD45_21
      "123.5"           // FIELD46_21

      "1234.6"          // FIELD39_22
      "1234.6"          // FIELD40_22
      "1234.6"          // FIELD41_22
      "1234.6"          // FIELD42_22
      "123.5"           // FIELD43_22
      "1234.6"          // FIELD44_22
      "1234.6"          // FIELD45_22
      "123.5"           // FIELD46_22

      "1234.6"          // FIELD39_23
      "1234.6"          // FIELD40_23
      "1234.6"          // FIELD41_23
      "1234.6"          // FIELD42_23
      "123.5"           // FIELD43_23
      "1234.6"          // FIELD44_23
      "1234.6"          // FIELD45_23
      "123.5"           // FIELD46_23

      "1234.6"          // FIELD39_24
      "1234.6"          // FIELD40_24
      "1234.6"          // FIELD41_24
      "1234.6"          // FIELD42_24
      "123.5"           // FIELD43_24
      "1234.6"          // FIELD44_24
      "1234.6"          // FIELD45_24
      "123.5"           // FIELD46_24

      "1234.6"          // FIELD39_25
      "1234.6"          // FIELD40_25
      "1234.6"          // FIELD41_25
      "1234.6"          // FIELD42_25
      "123.5"           // FIELD43_25
      "1234.6"          // FIELD44_25
      "1234.6"          // FIELD45_25
      "123.5"           // FIELD46_25

      "1234.6"          // FIELD39_26
      "1234.6"          // FIELD40_26
      "1234.6"          // FIELD41_26
      "1234.6"          // FIELD42_26
      "123.5"           // FIELD43_26
      "1234.6"          // FIELD44_26
      "1234.6"          // FIELD45_26
      "123.5"           // FIELD46_26

      "1234.6"          // FIELD39_27
      "1234.6"          // FIELD40_27
      "1234.6"          // FIELD41_27
      "1234.6"          // FIELD42_27
      "123.5"           // FIELD43_27
      "1234.6"          // FIELD44_27
      "1234.6"          // FIELD45_27
      "123.5"           // FIELD46_27

      "1234.6"          // FIELD39_28
      "1234.6"          // FIELD40_28
      "1234.6"          // FIELD41_28
      "1234.6"          // FIELD42_28
      "123.5"           // FIELD43_28
      "1234.6"          // FIELD44_28
      "1234.6"          // FIELD45_28
      "123.5"           // FIELD46_28

      "1234.6"          // FIELD39_29
      "1234.6"          // FIELD40_29
      "1234.6"          // FIELD41_29
      "1234.6"          // FIELD42_29
      "123.5"           // FIELD43_29
      "1234.6"          // FIELD44_29
      "1234.6"          // FIELD45_29
      "123.5"           // FIELD46_29

      "1234.6"          // FIELD39_30
      "1234.6"          // FIELD40_30
      "1234.6"          // FIELD41_30
      "1234.6"          // FIELD42_30
      "123.5"           // FIELD43_30
      "1234.6"          // FIELD44_30
      "1234.6"          // FIELD45_30
      "123.5"           // FIELD46_30

      "1234.6"          // FIELD39_31
      "1234.6"          // FIELD40_31
      "1234.6"          // FIELD41_31
      "1234.6"          // FIELD42_31
      "123.5"           // FIELD43_31
      "1234.6"          // FIELD44_31
      "1234.6"          // FIELD45_31
      "123.5"           // FIELD46_31

      "1234.6"          // FIELD39_32
      "1234.6"          // FIELD40_32
      "1234.6"          // FIELD41_32
      "1234.6"          // FIELD42_32
      "123.5"           // FIELD43_32
      "1234.6"          // FIELD44_32
      "1234.6"          // FIELD45_32
      "123.5"           // FIELD46_32

      "1234.6"          // FIELD39_33
      "1234.6"          // FIELD40_33
      "1234.6"          // FIELD41_33
      "1234.6"          // FIELD42_33
      "123.5"           // FIELD43_33
      "1234.6"          // FIELD44_33
      "1234.6"          // FIELD45_33
      "123.5"           // FIELD46_33

      "1234.6"          // FIELD39_34
      "1234.6"          // FIELD40_34
      "1234.6"          // FIELD41_34
      "1234.6"          // FIELD42_34
      "123.5"           // FIELD43_34
      "1234.6"          // FIELD44_34
      "1234.6"          // FIELD45_34
      "123.5"           // FIELD46_34

      "1234.6"          // FIELD39_35
      "1234.6"          // FIELD40_35
      "1234.6"          // FIELD41_35
      "1234.6"          // FIELD42_35
      "123.5"           // FIELD43_35
      "1234.6"          // FIELD44_35
      "1234.6"          // FIELD45_35
      "123.5"           // FIELD46_35

      "1234.6"          // FIELD39_36
      "1234.6"          // FIELD40_36
      "1234.6"          // FIELD41_36
      "1234.6"          // FIELD42_36
      "123.5"           // FIELD43_36
      "1234.6"          // FIELD44_36
      "1234.6"          // FIELD45_36
      "123.5"           // FIELD46_36

      "1234.6"          // FIELD39_37
      "1234.6"          // FIELD40_37
      "1234.6"          // FIELD41_37
      "1234.6"          // FIELD42_37
      "123.5"           // FIELD43_37
      "1234.6"          // FIELD44_37
      "1234.6"          // FIELD45_37
      "123.5"           // FIELD46_37

      "1234.6"          // FIELD39_38
      "1234.6"          // FIELD40_38
      "1234.6"          // FIELD41_38
      "1234.6"          // FIELD42_38
      "123.5"           // FIELD43_38
      "1234.6"          // FIELD44_38
      "1234.6"          // FIELD45_38
      "123.5"           // FIELD46_38

      "1234.6"          // FIELD39_39
      "1234.6"          // FIELD40_39
      "1234.6"          // FIELD41_39
      "1234.6"          // FIELD42_39
      "123.5"           // FIELD43_39
      "1234.6"          // FIELD44_39
      "1234.6"          // FIELD45_39
      "123.5"           // FIELD46_39

      "1234.6"          // FIELD39_40
      "1234.6"          // FIELD40_40
      "1234.6"          // FIELD41_40
      "1234.6"          // FIELD42_40
      "123.5"           // FIELD43_40
      "1234.6"          // FIELD44_40
      "1234.6"          // FIELD45_40
      "123.5"           // FIELD46_40

      "1234.6"          // FIELD39_41
      "1234.6"          // FIELD40_41
      "1234.6"          // FIELD41_41
      "1234.6"          // FIELD42_41
      "123.5"           // FIELD43_41
      "1234.6"          // FIELD44_41
      "1234.6"          // FIELD45_41
      "123.5"           // FIELD46_41

      "1234.6"          // FIELD39_42
      "1234.6"          // FIELD40_42
      "1234.6"          // FIELD41_42
      "1234.6"          // FIELD42_42
      "123.5"           // FIELD43_42
      "1234.6"          // FIELD44_42
      "1234.6"          // FIELD45_42
      "123.5"           // FIELD46_42

      "1234.6"          // FIELD39_43
      "1234.6"          // FIELD40_43
      "1234.6"          // FIELD41_43
      "1234.6"          // FIELD42_43
      "123.5"           // FIELD43_43
      "1234.6"          // FIELD44_43
      "1234.6"          // FIELD45_43
      "123.5"           // FIELD46_43

      "1234.6"          // FIELD39_44
      "1234.6"          // FIELD40_44
      "1234.6"          // FIELD41_44
      "1234.6"          // FIELD42_44
      "123.5"           // FIELD43_44
      "1234.6"          // FIELD44_44
      "1234.6"          // FIELD45_44
      "123.5"           // FIELD46_44

      "1234.6"          // FIELD39_45
      "1234.6"          // FIELD40_45
      "1234.6"          // FIELD41_45
      "1234.6"          // FIELD42_45
      "123.5"           // FIELD43_45
      "1234.6"          // FIELD44_45
      "1234.6"          // FIELD45_45
      "123.5"           // FIELD46_45

      "1234.6"          // FIELD39_46
      "1234.6"          // FIELD40_46
      "1234.6"          // FIELD41_46
      "1234.6"          // FIELD42_46
      "123.5"           // FIELD43_46
      "1234.6"          // FIELD44_46
      "1234.6"          // FIELD45_46
      "123.5"           // FIELD46_46

      "1234.6"          // FIELD39_47
      "1234.6"          // FIELD40_47
      "1234.6"          // FIELD41_47
      "1234.6"          // FIELD42_47
      "123.5"           // FIELD43_47
      "1234.6"          // FIELD44_47
      "1234.6"          // FIELD45_47
      "123.5"           // FIELD46_47

      "1234.6"          // FIELD39_48
      "1234.6"          // FIELD40_48
      "1234.6"          // FIELD41_48
      "1234.6"          // FIELD42_48
      "123.5"           // FIELD43_48
      "1234.6"          // FIELD44_48
      "1234.6"          // FIELD45_48
      "123.5"           // FIELD46_48

      "1234.6"          // FIELD39_49
      "1234.6"          // FIELD40_49
      "1234.6"          // FIELD41_49
      "1234.6"          // FIELD42_49
      "123.5"           // FIELD43_49
      "1234.6"          // FIELD44_49
      "1234.6"          // FIELD45_49
      "123.5"           // FIELD46_49

      // ERROR Missing data for 50th loop <<<<<<<<<<<<<<<<<<<<<<<< ERROR <<<<<<<<<<<<<
      // This will not parse because FIELD47 data will be parsed by a numeric (.toDouble) and fail

      // end for (i = 0; i < 50; ++i)

      "FIELD47                                              " // FIELD47
      "123.5"           // FIELD48
      "123"             // FIELD49
      "1234"            // FIELD50
      "1234"            // FIELD51
      "1234"            // FIELD52

      // for (i = 0; i < 9; ++i)

      "1234567.9"       // FIELD53_01
      "1234567"         // FIELD54_01
      "1234567"         // FIELD55_01
      "1234567"         // FIELD56_01
      "1234567"         // FIELD57_01
      "12"              // FIELD58_01
      "12"              // FIELD59_01
      "RW"              // FIELD60_01
      "B"               // FIELD61_01
      "123456"          // FIELD62_01
      "1234"            // FIELD63_01
      "1234"            // FIELD64_01
      "123"             // FIELD65_01
      "123"             // FIELD66_01
      "123"             // FIELD67_01

      "1234567.9"       // FIELD53_02
      "1234567"         // FIELD54_02
      "1234567"         // FIELD55_02
      "1234567"         // FIELD56_02
      "1234567"         // FIELD57_02
      "12"              // FIELD58_02
      "12"              // FIELD59_02
      "RW"              // FIELD60_02
      "B"               // FIELD61_02
      "123456"          // FIELD62_02
      "1234"            // FIELD63_02
      "1234"            // FIELD64_02
      "123"             // FIELD65_02
      "123"             // FIELD66_02
      "123"             // FIELD67_02

      "1234567.9"       // FIELD53_03
      "1234567"         // FIELD54_03
      "1234567"         // FIELD55_03
      "1234567"         // FIELD56_03
      "1234567"         // FIELD57_03
      "12"              // FIELD58_03
      "12"              // FIELD59_03
      "RW"              // FIELD60_03
      "B"               // FIELD61_03
      "123456"          // FIELD62_03
      "1234"            // FIELD63_03
      "1234"            // FIELD64_03
      "123"             // FIELD65_03
      "123"             // FIELD66_03
      "123"             // FIELD67_03

      "1234567.9"       // FIELD53_04
      "1234567"         // FIELD54_04
      "1234567"         // FIELD55_04
      "1234567"         // FIELD56_04
      "1234567"         // FIELD57_04
      "12"              // FIELD58_04
      "12"              // FIELD59_04
      "RW"              // FIELD60_04
      "B"               // FIELD61_04
      "123456"          // FIELD62_04
      "1234"            // FIELD63_04
      "1234"            // FIELD64_04
      "123"             // FIELD65_04
      "123"             // FIELD66_04
      "123"             // FIELD67_04

      "1234567.9"       // FIELD53_05
      "1234567"         // FIELD54_05
      "1234567"         // FIELD55_05
      "1234567"         // FIELD56_05
      "1234567"         // FIELD57_05
      "12"              // FIELD58_05
      "12"              // FIELD59_05
      "RW"              // FIELD60_05
      "B"               // FIELD61_05
      "123456"          // FIELD62_05
      "1234"            // FIELD63_05
      "1234"            // FIELD64_05
      "123"             // FIELD65_05
      "123"             // FIELD66_05
      "123"             // FIELD67_05

      "1234567.9"       // FIELD53_06
      "1234567"         // FIELD54_06
      "1234567"         // FIELD55_06
      "1234567"         // FIELD56_06
      "1234567"         // FIELD57_06
      "12"              // FIELD58_06
      "12"              // FIELD59_06
      "RW"              // FIELD60_06
      "B"               // FIELD61_06
      "123456"          // FIELD62_06
      "1234"            // FIELD63_06
      "1234"            // FIELD64_06
      "123"             // FIELD65_06
      "123"             // FIELD66_06
      "123"             // FIELD67_06

      "1234567.9"       // FIELD53_07
      "1234567"         // FIELD54_07
      "1234567"         // FIELD55_07
      "1234567"         // FIELD56_07
      "1234567"         // FIELD57_07
      "12"              // FIELD58_07
      "12"              // FIELD59_07
      "RW"              // FIELD60_07
      "B"               // FIELD61_07
      "123456"          // FIELD62_07
      "1234"            // FIELD63_07
      "1234"            // FIELD64_07
      "123"             // FIELD65_07
      "123"             // FIELD66_07
      "123"             // FIELD67_07

      "1234567.9"       // FIELD53_08
      "1234567"         // FIELD54_08
      "1234567"         // FIELD55_08
      "1234567"         // FIELD56_08
      "1234567"         // FIELD57_08
      "12"              // FIELD58_08
      "12"              // FIELD59_08
      "RW"              // FIELD60_08
      "B"               // FIELD61_08
      "123456"          // FIELD62_08
      "1234"            // FIELD63_08
      "1234"            // FIELD64_08
      "123"             // FIELD65_08
      "123"             // FIELD66_08
      "123"             // FIELD67_08

      "1234567.9"       // FIELD53_09
      "1234567"         // FIELD54_09
      "1234567"         // FIELD55_09
      "1234567"         // FIELD56_09
      "1234567"         // FIELD57_09
      "12"              // FIELD58_09
      "12"              // FIELD59_09
      "RW"              // FIELD60_09
      "B"               // FIELD61_09
      "123456"          // FIELD62_09
      "1234"            // FIELD63_09
      "1234"            // FIELD64_09
      "123"             // FIELD65_09
      "123"             // FIELD66_09
      "123"             // FIELD67_09

      // end for (i = 0; i < 9; ++i)

      "1234"            // FIELD68
      "1234"            // FIELD69
      "123"             // FIELD70

      // for (i = 0; i < 5; ++i)

      "1234567890123456789.1"   // FIELD71_01
      "1234567890123456789.1"   // FIELD72_01
      "1234567890123456789.1"   // FIELD73_01
      "1234567890123456789.1"   // FIELD74_01
      "1234567890123456789.1"   // FIELD75_01
      "123456789.12"            // FIELD76_01
      "123456789.12"            // FIELD77_01
      "123456789.12"            // FIELD78_01
      "123456789.12"            // FIELD79_01
      "123456789.12"            // FIELD80_01
      "123456789.12"            // FIELD81_01
      "123456789.12"            // FIELD82_01
      "123456789.12"            // FIELD83_01
      "123456789.12"            // FIELD84_01
      "123456789.12"            // FIELD85_01
      "123456789.12"            // FIELD86_01
      "123456789.12"            // FIELD87_01
      "123456789.12"            // FIELD88_01
      "123456789.12"            // FIELD89_01
      "123456789.12"            // FIELD90_01
      "123456789.12"            // FIELD91_01
      "123456789.12"            // FIELD92_01
      "123456789.12"            // FIELD93_01

      "1234567890123456789.1"   // FIELD71_02
      "1234567890123456789.1"   // FIELD72_02
      "1234567890123456789.1"   // FIELD73_02
      "1234567890123456789.1"   // FIELD74_02
      "1234567890123456789.1"   // FIELD75_02
      "123456789.12"            // FIELD76_02
      "123456789.12"            // FIELD77_02
      "123456789.12"            // FIELD78_02
      "123456789.12"            // FIELD79_02
      "123456789.12"            // FIELD80_02
      "123456789.12"            // FIELD81_02
      "123456789.12"            // FIELD82_02
      "123456789.12"            // FIELD83_02
      "123456789.12"            // FIELD84_02
      "123456789.12"            // FIELD85_02
      "123456789.12"            // FIELD86_02
      "123456789.12"            // FIELD87_02
      "123456789.12"            // FIELD88_02
      "123456789.12"            // FIELD89_02
      "123456789.12"            // FIELD90_02
      "123456789.12"            // FIELD91_02
      "123456789.12"            // FIELD92_02
      "123456789.12"            // FIELD93_02

      "1234567890123456789.1"   // FIELD71_03
      "1234567890123456789.1"   // FIELD72_03
      "1234567890123456789.1"   // FIELD73_03
      "1234567890123456789.1"   // FIELD74_03
      "1234567890123456789.1"   // FIELD75_03
      "123456789.12"            // FIELD76_03
      "123456789.12"            // FIELD77_03
      "123456789.12"            // FIELD78_03
      "123456789.12"            // FIELD79_03
      "123456789.12"            // FIELD80_03
      "123456789.12"            // FIELD81_03
      "123456789.12"            // FIELD82_03
      "123456789.12"            // FIELD83_03
      "123456789.12"            // FIELD84_03
      "123456789.12"            // FIELD85_03
      "123456789.12"            // FIELD86_03
      "123456789.12"            // FIELD87_03
      "123456789.12"            // FIELD88_03
      "123456789.12"            // FIELD89_03
      "123456789.12"            // FIELD90_03
      "123456789.12"            // FIELD91_03
      "123456789.12"            // FIELD92_03
      "123456789.12"            // FIELD93_03

      "1234567890123456789.1"   // FIELD71_04
      "1234567890123456789.1"   // FIELD72_04
      "1234567890123456789.1"   // FIELD73_04
      "1234567890123456789.1"   // FIELD74_04
      "1234567890123456789.1"   // FIELD75_04
      "123456789.12"            // FIELD76_04
      "123456789.12"            // FIELD77_04
      "123456789.12"            // FIELD78_04
      "123456789.12"            // FIELD79_04
      "123456789.12"            // FIELD80_04
      "123456789.12"            // FIELD81_04
      "123456789.12"            // FIELD82_04
      "123456789.12"            // FIELD83_04
      "123456789.12"            // FIELD84_04
      "123456789.12"            // FIELD85_04
      "123456789.12"            // FIELD86_04
      "123456789.12"            // FIELD87_04
      "123456789.12"            // FIELD88_04
      "123456789.12"            // FIELD89_04
      "123456789.12"            // FIELD90_04
      "123456789.12"            // FIELD91_04
      "123456789.12"            // FIELD92_04
      "123456789.12"            // FIELD93_04

      "1234567890123456789.1"   // FIELD71_05
      "1234567890123456789.1"   // FIELD72_05
      "1234567890123456789.1"   // FIELD73_05
      "1234567890123456789.1"   // FIELD74_05
      "1234567890123456789.1"   // FIELD75_05
      "123456789.12"            // FIELD76_05
      "123456789.12"            // FIELD77_05
      "123456789.12"            // FIELD78_05
      "123456789.12"            // FIELD79_05
      "123456789.12"            // FIELD80_05
      "123456789.12"            // FIELD81_05
      "123456789.12"            // FIELD82_05
      "123456789.12"            // FIELD83_05
      "123456789.12"            // FIELD84_05
      "123456789.12"            // FIELD85_05
      "123456789.12"            // FIELD86_05
      "123456789.12"            // FIELD87_05
      "123456789.12"            // FIELD88_05
      "123456789.12"            // FIELD89_05
      "123456789.12"            // FIELD90_05
      "123456789.12"            // FIELD91_05
      "123456789.12"            // FIELD92_05
      "123456789.12"            // FIELD93_05

      // end for (i = 0; i < 5; ++i)
      );


   FactoryResource<DynamicObject> treDO;
   size_t numBytes(0);

   stringstream input;
   input << data1;
   input << data2;
   numBytes = input.str().size();
   string errorMessage;

   bool success = toDynamicObject(input, numBytes, *treDO.get(), errorMessage);

   if (!errorMessage.empty())
   {
      failure << errorMessage << endl;
      errorMessage.clear();
   }

   TreState status(INVALID);
   if (success)
   {
      status = isTreValid(*treDO.get(), failure);
   }

   treDO->clear();

   if (status == INVALID)
   {
      return false;
   }

   // Start of test 2 - Negative test: 1 extra byte in input stream
   stringstream input2;
   input2 << data1;
   input2 << data2;
   input2 << "1";          // Add one more byte; valid as alphanumberic or numeric
   numBytes = input2.str().size();
   success = toDynamicObject(input2, numBytes, *treDO.get(), errorMessage);
   if (success == true)     // negative test so success must == false.
   {
      failure << "Error: Negative test of 1 extra byte failed\n";
      treDO->clear();
      return false;
   }

   // start of test 3 - Negative test: 1 byte short in input stream
   string negdata3(data1);        // data for test 3 not the 3rd data set
   negdata3 += data2;
   negdata3.resize(negdata3.size()-1);
   stringstream input3(negdata3);
   numBytes = input3.str().size();
   success = toDynamicObject(input3, numBytes, *treDO.get(), errorMessage);
   if (success == true)  // negative test so success must == false.
   {
      failure << "Error: Negative test of 1 byte short failed\n";
      treDO->clear();
      return false;
   }

   // start of test 4 - alpha data in FIELD7 should be numeric only
   stringstream input4;
   input4 << data_error1;
   input4 << data2;
   numBytes = input4.str().size();
   success = toDynamicObject(input4, numBytes, *treDO.get(), errorMessage);
   if (success == true)  // negative test so success must == false.
   {
      failure << "ERROR: RADSDA negative test failed: FIELD7 should be numeric only\n";
      treDO->clear();
      return false;
   }

   // start of test 4 -
   stringstream input5;
   input5 << data1;
   input5 << data_error2;
   numBytes = input5.str().size();
   success = toDynamicObject(input5, numBytes, *treDO.get(), errorMessage);
   if (success == true)  // negative test so success must == false.
   {
      failure << "ERROR: RADSDA negative test failed: missing data for 50th loop\n";
      treDO->clear();
      return false;
   }

   status = VALID;

   treDO->clear();

   return (status != INVALID);
}

bool Nitf::RadsdaParser::toDynamicObject(istream& input, size_t numBytes, DynamicObject& output,
   string &errorMessage) const
{
   vector<char> buf;
   bool ok(true);
   bool success(true);

   // Allow all blanks for these fields since we do not have descriptions of them.
   readField<string>(input, output, success, RADSDA::FIELD1, 7, errorMessage, buf, true);
   readField<string>(input, output, success, RADSDA::FIELD2, 9, errorMessage, buf, true);
   readField<string>(input, output, success, RADSDA::FIELD3, 8, errorMessage, buf, true);
   readField<string>(input, output, success, RADSDA::FIELD4, 3, errorMessage, buf, true);
   readField<string>(input, output, success, RADSDA::FIELD5, 15, errorMessage, buf, true);
   readField<string>(input, output, success, RADSDA::FIELD6, 7, errorMessage, buf, true);
   readField<int>(input, output, success, RADSDA::FIELD7, 5, errorMessage, buf, true);
   readField<int>(input, output, success, RADSDA::FIELD8, 1, errorMessage, buf, true);
   readField<string>(input, output, success, RADSDA::FIELD9, 24, errorMessage, buf, true);
   readField<int>(input, output, success, RADSDA::FIELD10, 9, errorMessage, buf, true);
   readField<int>(input, output, success, RADSDA::FIELD11, 9, errorMessage, buf, true);
   readField<int>(input, output, success, RADSDA::FIELD12, 9, errorMessage, buf, true);
   readField<int>(input, output, success, RADSDA::FIELD13, 9, errorMessage, buf, true);
   readField<int>(input, output, success, RADSDA::FIELD14, 9, errorMessage, buf, true);
   readField<int>(input, output, success, RADSDA::FIELD15, 9, errorMessage, buf, true);
   readField<int>(input, output, success, RADSDA::FIELD16, 4, errorMessage, buf, true);
   readField<double>(input, output, success, RADSDA::FIELD17, 6, errorMessage, buf, true);
   readField<double>(input, output, success, RADSDA::FIELD18, 6, errorMessage, buf, true);
   readField<int>(input, output, success, RADSDA::FIELD19, 4, errorMessage, buf, true);
   readField<double>(input, output, success, RADSDA::FIELD20, 5, errorMessage, buf, true);
   readField<double>(input, output, success, RADSDA::FIELD21, 5, errorMessage, buf, true);
   readField<string>(input, output, success, RADSDA::FIELD22, 5, errorMessage, buf, true);
   success = success && readFromStream(input, buf, 1536, false) && output.setAttribute(RADSDA::FIELD23, buf);
   readField<string>(input, output, success, RADSDA::FIELD24, 5, errorMessage, buf);
   success = success && readFromStream(input, buf, 1536, false) && output.setAttribute(RADSDA::FIELD25, buf);
   readField<string>(input, output, success, RADSDA::FIELD26, 24, errorMessage, buf, true);
   readField<string>(input, output, success, RADSDA::FIELD27, 35, errorMessage, buf, true);
   readField<int>(input, output, success, RADSDA::FIELD28, 2, errorMessage, buf, true);
   readField<int>(input, output, success, RADSDA::FIELD29, 1, errorMessage, buf, true);
   readField<int>(input, output, success, RADSDA::FIELD30, 2, errorMessage, buf, true);
   readField<int>(input, output, success, RADSDA::FIELD31, 1, errorMessage, buf, true);
   readField<int>(input, output, success, RADSDA::FIELD32, 1, errorMessage, buf, true);
   readField<int>(input, output, success, RADSDA::FIELD33, 2, errorMessage, buf, true);
   readField<int>(input, output, success, RADSDA::FIELD34, 1, errorMessage, buf, true);
   readField<int>(input, output, success, RADSDA::FIELD35, 2, errorMessage, buf, true);
   readField<int>(input, output, success, RADSDA::FIELD36, 2, errorMessage, buf, true);
   readField<int>(input, output, success, RADSDA::FIELD37, 1, errorMessage, buf, true);
   readField<int>(input, output, success, RADSDA::FIELD38, 2, errorMessage, buf, true);

   int i = 0;
   for (i = 0; i < 50; ++i)
   {
      stringstream strm;
      strm << setw(2) << setfill('0') << i+1;

      readField<double>(input, output, success, RADSDA::FIELD39_ + strm.str(), 6, errorMessage, buf, true);
      readField<double>(input, output, success, RADSDA::FIELD40_ + strm.str(), 6, errorMessage, buf, true);
      readField<double>(input, output, success, RADSDA::FIELD41_ + strm.str(), 6, errorMessage, buf, true);
      readField<double>(input, output, success, RADSDA::FIELD42_ + strm.str(), 6, errorMessage, buf, true);
      readField<double>(input, output, success, RADSDA::FIELD43_ + strm.str(), 5, errorMessage, buf, true);
      readField<double>(input, output, success, RADSDA::FIELD44_ + strm.str(), 6, errorMessage, buf, true);
      readField<double>(input, output, success, RADSDA::FIELD45_ + strm.str(), 6, errorMessage, buf, true);
      readField<double>(input, output, success, RADSDA::FIELD46_ + strm.str(), 5, errorMessage, buf, true);
   }

   readField<string>(input, output, success, RADSDA::FIELD47, 53, errorMessage, buf, true);
   readField<double>(input, output, success, RADSDA::FIELD48, 5, errorMessage, buf, true);
   readField<int>(input, output, success, RADSDA::FIELD49, 3, errorMessage, buf, true);
   readField<int>(input, output, success, RADSDA::FIELD50, 4, errorMessage, buf, true);
   readField<int>(input, output, success, RADSDA::FIELD51, 4, errorMessage, buf, true);
   readField<int>(input, output, success, RADSDA::FIELD52, 4, errorMessage, buf, true);

   for (i = 0; i < 9; ++i)
   {
      stringstream strm;
      strm << i+1;

      readField<double>(input, output, success, RADSDA::FIELD53_ + strm.str(), 9, errorMessage, buf, true);
      readField<int>(input, output, success, RADSDA::FIELD54_ + strm.str(), 7, errorMessage, buf, true);
      readField<int>(input, output, success, RADSDA::FIELD55_ + strm.str(), 7, errorMessage, buf, true);
      readField<int>(input, output, success, RADSDA::FIELD56_ + strm.str(), 7, errorMessage, buf, true);
      readField<int>(input, output, success, RADSDA::FIELD57_ + strm.str(), 7, errorMessage, buf, true);
      readField<int>(input, output, success, RADSDA::FIELD58_ + strm.str(), 2, errorMessage, buf, true);
      readField<int>(input, output, success, RADSDA::FIELD59_ + strm.str(), 2, errorMessage, buf, true);
      readField<string>(input, output, success, RADSDA::FIELD60_ + strm.str(), 2, errorMessage, buf, true);
      readField<string>(input, output, success, RADSDA::FIELD61_ + strm.str(), 1, errorMessage, buf, true);
      readField<int>(input, output, success, RADSDA::FIELD62_ + strm.str(), 6, errorMessage, buf, true);
      readField<int>(input, output, success, RADSDA::FIELD63_ + strm.str(), 4, errorMessage, buf, true);
      readField<int>(input, output, success, RADSDA::FIELD64_ + strm.str(), 4, errorMessage, buf, true);
      readField<int>(input, output, success, RADSDA::FIELD65_ + strm.str(), 3, errorMessage, buf, true);
      readField<int>(input, output, success, RADSDA::FIELD66_ + strm.str(), 3, errorMessage, buf, true);
      readField<int>(input, output, success, RADSDA::FIELD67_ + strm.str(), 3, errorMessage, buf, true);
   }

   readField<int>(input, output, success, RADSDA::FIELD68, 4, errorMessage, buf, true);
   readField<int>(input, output, success, RADSDA::FIELD69, 4, errorMessage, buf, true);
   readField<int>(input, output, success, RADSDA::FIELD70, 3, errorMessage, buf, true);

   for (i = 0; i < 5; ++i)
   {
      stringstream strm;
      strm << i+1;

      readField<double>(input, output, success, RADSDA::FIELD71_ + strm.str(), 21, errorMessage, buf, true);
      readField<double>(input, output, success, RADSDA::FIELD72_ + strm.str(), 21, errorMessage, buf, true);
      readField<double>(input, output, success, RADSDA::FIELD73_ + strm.str(), 21, errorMessage, buf, true);
      readField<double>(input, output, success, RADSDA::FIELD74_ + strm.str(), 21, errorMessage, buf, true);
      readField<double>(input, output, success, RADSDA::FIELD75_ + strm.str(), 21, errorMessage, buf, true);
      readField<double>(input, output, success, RADSDA::FIELD76_ + strm.str(), 12, errorMessage, buf, true);
      readField<double>(input, output, success, RADSDA::FIELD77_ + strm.str(), 12, errorMessage, buf, true);
      readField<double>(input, output, success, RADSDA::FIELD78_ + strm.str(), 12, errorMessage, buf, true);
      readField<double>(input, output, success, RADSDA::FIELD79_ + strm.str(), 12, errorMessage, buf, true);
      readField<double>(input, output, success, RADSDA::FIELD80_ + strm.str(), 12, errorMessage, buf, true);
      readField<double>(input, output, success, RADSDA::FIELD81_ + strm.str(), 12, errorMessage, buf, true);
      readField<double>(input, output, success, RADSDA::FIELD82_ + strm.str(), 12, errorMessage, buf, true);
      readField<double>(input, output, success, RADSDA::FIELD83_ + strm.str(), 12, errorMessage, buf, true);
      readField<double>(input, output, success, RADSDA::FIELD84_ + strm.str(), 12, errorMessage, buf, true);
      readField<double>(input, output, success, RADSDA::FIELD85_ + strm.str(), 12, errorMessage, buf, true);
      readField<double>(input, output, success, RADSDA::FIELD86_ + strm.str(), 12, errorMessage, buf, true);
      readField<double>(input, output, success, RADSDA::FIELD87_ + strm.str(), 12, errorMessage, buf, true);
      readField<double>(input, output, success, RADSDA::FIELD88_ + strm.str(), 12, errorMessage, buf, true);
      readField<double>(input, output, success, RADSDA::FIELD89_ + strm.str(), 12, errorMessage, buf, true);
      readField<double>(input, output, success, RADSDA::FIELD90_ + strm.str(), 12, errorMessage, buf, true);
      readField<double>(input, output, success, RADSDA::FIELD91_ + strm.str(), 12, errorMessage, buf, true);
      readField<double>(input, output, success, RADSDA::FIELD92_ + strm.str(), 12, errorMessage, buf, true);
      readField<double>(input, output, success, RADSDA::FIELD93_ + strm.str(), 12, errorMessage, buf, true);
   }


   size_t numRead = input.tellg();
   if (numRead != numBytes)
   {
      numReadErrMsg(numRead, numBytes, errorMessage);
      return false;
   }

   return success;
}


Nitf::TreState Nitf::RadsdaParser::isTreValid(const DynamicObject& tre, ostream& reporter) const
{
   // The field ranges of this tag are classified therefore the values in this validator use the
   // minimum and maximum integer and double values. This will at least verify the variable type in an
   // unclassified environment.
   // The strings will be verified to be ASCII (BCS-A).

   static const int minInt(numeric_limits<int>::min());
   static const int maxInt(numeric_limits<int>::max());
   static const double minDouble(-numeric_limits<double>::max());
   static const double maxDouble(numeric_limits<double>::max());

   TreState status(VALID);
   set<string> testSet;
   unsigned int numFields = 0;

   testSet.clear();
   status = MaxState(status, testTagValidBcsASet(tre, reporter,
      &numFields, RADSDA::FIELD1, testSet, true, true, false));

   testSet.clear();
   status = MaxState(status, testTagValidBcsASet(tre, reporter,
      &numFields, RADSDA::FIELD2, testSet, true, true, false));

   testSet.clear();
   status = MaxState(status, testTagValidBcsASet(tre, reporter,
      &numFields, RADSDA::FIELD3, testSet, true, true, false));

   testSet.clear();
   status = MaxState(status, testTagValidBcsASet(tre, reporter,
      &numFields, RADSDA::FIELD4, testSet, true, true, false));

   testSet.clear();
   status = MaxState(status, testTagValidBcsASet(tre, reporter,
      &numFields, RADSDA::FIELD5, testSet, true, true, false));

   testSet.clear();
   status = MaxState(status, testTagValidBcsASet(tre, reporter,
      &numFields, RADSDA::FIELD6, testSet, true, true, false));

   status = MaxState(status, testTagValueRange<int>(tre, reporter,
      &numFields, RADSDA::FIELD7, minInt, maxInt));

   status = MaxState(status, testTagValueRange<int>(tre, reporter,
      &numFields, RADSDA::FIELD8, minInt, maxInt));

   testSet.clear();
   status = MaxState(status, testTagValidBcsASet(tre, reporter,
      &numFields, RADSDA::FIELD9, testSet, true, true, false));

   status = MaxState(status, testTagValueRange<int>(tre, reporter, &numFields, RADSDA::FIELD10, minInt, maxInt));
   status = MaxState(status, testTagValueRange<int>(tre, reporter, &numFields, RADSDA::FIELD11, minInt, maxInt));
   status = MaxState(status, testTagValueRange<int>(tre, reporter, &numFields, RADSDA::FIELD12, minInt, maxInt));
   status = MaxState(status, testTagValueRange<int>(tre, reporter, &numFields, RADSDA::FIELD13, minInt, maxInt));
   status = MaxState(status, testTagValueRange<int>(tre, reporter, &numFields, RADSDA::FIELD14, minInt, maxInt));
   status = MaxState(status, testTagValueRange<int>(tre, reporter, &numFields, RADSDA::FIELD15, minInt, maxInt));
   status = MaxState(status, testTagValueRange<int>(tre, reporter, &numFields, RADSDA::FIELD16, minInt, maxInt));
   status = MaxState(status, testTagValueRange<double>(tre, reporter, &numFields, RADSDA::FIELD17, minDouble,
      maxDouble));
   status = MaxState(status, testTagValueRange<double>(tre, reporter, &numFields, RADSDA::FIELD18, minDouble,
      maxDouble));
   status = MaxState(status, testTagValueRange<int>(tre, reporter, &numFields, RADSDA::FIELD19, minInt, maxInt));
   status = MaxState(status, testTagValueRange<double>(tre, reporter, &numFields, RADSDA::FIELD20, minDouble,
      maxDouble));
   status = MaxState(status, testTagValueRange<double>(tre, reporter, &numFields, RADSDA::FIELD21, minDouble,
      maxDouble));

   testSet.clear();
   status = MaxState(status, testTagValidBcsASet(tre, reporter,
      &numFields, RADSDA::FIELD22, testSet, true, true, false));

   if (tre.getAttribute(RADSDA::FIELD23).isValid() == false)
   {
      reporter << "Field \"FIELD23\" missing from the Dynamic Object";
      status = INVALID;
   }
   else
   {
      ++numFields;
   }

   testSet.clear();
   status = MaxState(status, testTagValidBcsASet(tre, reporter,
      &numFields, RADSDA::FIELD24, testSet, true, true, false));

   if (tre.getAttribute(RADSDA::FIELD25).isValid() == false)
   {
      reporter << "Field \"FIELD25\" missing from the Dynamic Object";
      status = INVALID;
   }
   else
   {
      ++numFields;
   }

   testSet.clear();
   status = MaxState(status, testTagValidBcsASet(tre, reporter,
      &numFields, RADSDA::FIELD26, testSet, true, true, false));

   testSet.clear();
   status = MaxState(status, testTagValidBcsASet(tre, reporter,
      &numFields, RADSDA::FIELD27, testSet, true, true, false));

   status = MaxState(status, testTagValueRange<int>(tre, reporter, &numFields, RADSDA::FIELD28, minInt, maxInt));
   status = MaxState(status, testTagValueRange<int>(tre, reporter, &numFields, RADSDA::FIELD29, minInt, maxInt));
   status = MaxState(status, testTagValueRange<int>(tre, reporter, &numFields, RADSDA::FIELD30, minInt, maxInt));
   status = MaxState(status, testTagValueRange<int>(tre, reporter, &numFields, RADSDA::FIELD31, minInt, maxInt));
   status = MaxState(status, testTagValueRange<int>(tre, reporter, &numFields, RADSDA::FIELD32, minInt, maxInt));
   status = MaxState(status, testTagValueRange<int>(tre, reporter, &numFields, RADSDA::FIELD33, minInt, maxInt));
   status = MaxState(status, testTagValueRange<int>(tre, reporter, &numFields, RADSDA::FIELD34, minInt, maxInt));
   status = MaxState(status, testTagValueRange<int>(tre, reporter, &numFields, RADSDA::FIELD35, minInt, maxInt));
   status = MaxState(status, testTagValueRange<int>(tre, reporter, &numFields, RADSDA::FIELD36, minInt, maxInt));
   status = MaxState(status, testTagValueRange<int>(tre, reporter, &numFields, RADSDA::FIELD37, minInt, maxInt));
   status = MaxState(status, testTagValueRange<int>(tre, reporter, &numFields, RADSDA::FIELD38, minInt, maxInt));

   int i = 0;
   for (i = 0; i < 50; ++i)
   {
      stringstream strm;
      strm << setw(2) << setfill('0') << i+1;

      status = MaxState(status, testTagValueRange<double>(tre, reporter,
         &numFields, RADSDA::FIELD39_ + strm.str(), minDouble, maxDouble));

      status = MaxState(status, testTagValueRange<double>(tre, reporter,
         &numFields, RADSDA::FIELD40_ + strm.str(), minDouble, maxDouble));

      status = MaxState(status, testTagValueRange<double>(tre, reporter,
         &numFields, RADSDA::FIELD41_ + strm.str(), minDouble, maxDouble));

      status = MaxState(status, testTagValueRange<double>(tre, reporter,
         &numFields, RADSDA::FIELD42_ + strm.str(), minDouble, maxDouble));

      status = MaxState(status, testTagValueRange<double>(tre, reporter,
         &numFields, RADSDA::FIELD43_ + strm.str(), minDouble, maxDouble));

      status = MaxState(status, testTagValueRange<double>(tre, reporter,
         &numFields, RADSDA::FIELD44_ + strm.str(), minDouble, maxDouble));

      status = MaxState(status, testTagValueRange<double>(tre, reporter,
         &numFields, RADSDA::FIELD45_ + strm.str(), minDouble, maxDouble));

      status = MaxState(status, testTagValueRange<double>(tre, reporter,
         &numFields, RADSDA::FIELD46_ + strm.str(), minDouble, maxDouble));

   }

   testSet.clear();
   status = MaxState(status, testTagValidBcsASet(tre, reporter,
      &numFields, RADSDA::FIELD47, testSet, true, true, false));

   status = MaxState(status, testTagValueRange<double>(tre, reporter,
      &numFields, RADSDA::FIELD48, minDouble, maxDouble));

   status = MaxState(status, testTagValueRange<int>(tre, reporter,
      &numFields, RADSDA::FIELD49, minInt, maxInt));

   status = MaxState(status, testTagValueRange<int>(tre, reporter,
      &numFields, RADSDA::FIELD50, minInt, maxInt));

   status = MaxState(status, testTagValueRange<int>(tre, reporter,
      &numFields, RADSDA::FIELD51, minInt, maxInt));

   status = MaxState(status, testTagValueRange<int>(tre, reporter,
      &numFields, RADSDA::FIELD52, minInt, maxInt));

   for (i = 0; i < 9; ++i)
   {
      stringstream strm;
      strm << i+1;

      status = MaxState(status, testTagValueRange<double>(tre, reporter,
         &numFields, RADSDA::FIELD53_ + strm.str(), minDouble, maxDouble));

      status = MaxState(status, testTagValueRange<int>(tre, reporter,
         &numFields, RADSDA::FIELD54_ + strm.str(), minInt, maxInt));

      status = MaxState(status, testTagValueRange<int>(tre, reporter,
         &numFields, RADSDA::FIELD55_ + strm.str(), minInt, maxInt));

      status = MaxState(status, testTagValueRange<int>(tre, reporter,
         &numFields, RADSDA::FIELD56_ + strm.str(), minInt, maxInt));

      status = MaxState(status, testTagValueRange<int>(tre, reporter,
         &numFields, RADSDA::FIELD57_ + strm.str(), minInt, maxInt));

      status = MaxState(status, testTagValueRange<int>(tre, reporter,
         &numFields, RADSDA::FIELD58_ + strm.str(), minInt, maxInt));

      status = MaxState(status, testTagValueRange<int>(tre, reporter,
         &numFields, RADSDA::FIELD59_ + strm.str(), minInt, maxInt));

      testSet.clear();
      status = MaxState(status, testTagValidBcsASet(tre, reporter,
         &numFields, RADSDA::FIELD60_ + strm.str(), testSet, true, true, false));

      testSet.clear();
      status = MaxState(status, testTagValidBcsASet(tre, reporter,
         &numFields, RADSDA::FIELD61_ + strm.str(), testSet, true, true, false));

      status = MaxState(status, testTagValueRange<int>(tre, reporter,
         &numFields, RADSDA::FIELD62_ + strm.str(), minInt, maxInt));

      status = MaxState(status, testTagValueRange<int>(tre, reporter,
         &numFields, RADSDA::FIELD63_ + strm.str(), minInt, maxInt));

      status = MaxState(status, testTagValueRange<int>(tre, reporter,
         &numFields, RADSDA::FIELD64_ + strm.str(), minInt, maxInt));

      status = MaxState(status, testTagValueRange<int>(tre, reporter,
         &numFields, RADSDA::FIELD65_ + strm.str(), minInt, maxInt));

      status = MaxState(status, testTagValueRange<int>(tre, reporter,
         &numFields, RADSDA::FIELD66_ + strm.str(), minInt, maxInt));

      status = MaxState(status, testTagValueRange<int>(tre, reporter,
         &numFields, RADSDA::FIELD67_ + strm.str(), minInt, maxInt));
   }

   status = MaxState(status, testTagValueRange<int>(tre, reporter,
      &numFields, RADSDA::FIELD68, minInt, maxInt));

   status = MaxState(status, testTagValueRange<int>(tre, reporter,
      &numFields, RADSDA::FIELD69, minInt, maxInt));

   status = MaxState(status, testTagValueRange<int>(tre, reporter,
      &numFields, RADSDA::FIELD70, minInt, maxInt));

   for (i = 0; i < 5; ++i)
   {
      stringstream strm;
      strm << i+1;

      status = MaxState(status, testTagValueRange<double>(tre, reporter,
         &numFields, RADSDA::FIELD71_ + strm.str(), minDouble, maxDouble));

      status = MaxState(status, testTagValueRange<double>(tre, reporter,
         &numFields, RADSDA::FIELD72_ + strm.str(), minDouble, maxDouble));

      status = MaxState(status, testTagValueRange<double>(tre, reporter,
         &numFields, RADSDA::FIELD73_ + strm.str(), minDouble, maxDouble));

      status = MaxState(status, testTagValueRange<double>(tre, reporter,
         &numFields, RADSDA::FIELD74_ + strm.str(), minDouble, maxDouble));

      status = MaxState(status, testTagValueRange<double>(tre, reporter,
         &numFields, RADSDA::FIELD75_ + strm.str(), minDouble, maxDouble));

      status = MaxState(status, testTagValueRange<double>(tre, reporter,
         &numFields, RADSDA::FIELD76_ + strm.str(), minDouble, maxDouble));

      status = MaxState(status, testTagValueRange<double>(tre, reporter,
         &numFields, RADSDA::FIELD77_ + strm.str(), minDouble, maxDouble));

      status = MaxState(status, testTagValueRange<double>(tre, reporter,
         &numFields, RADSDA::FIELD78_ + strm.str(), minDouble, maxDouble));

      status = MaxState(status, testTagValueRange<double>(tre, reporter,
         &numFields, RADSDA::FIELD79_ + strm.str(), minDouble, maxDouble));

      status = MaxState(status, testTagValueRange<double>(tre, reporter,
         &numFields, RADSDA::FIELD80_ + strm.str(), minDouble, maxDouble));

      status = MaxState(status, testTagValueRange<double>(tre, reporter,
         &numFields, RADSDA::FIELD81_ + strm.str(), minDouble, maxDouble));

      status = MaxState(status, testTagValueRange<double>(tre, reporter,
         &numFields, RADSDA::FIELD82_ + strm.str(), minDouble, maxDouble));

      status = MaxState(status, testTagValueRange<double>(tre, reporter,
         &numFields, RADSDA::FIELD83_ + strm.str(), minDouble, maxDouble));

      status = MaxState(status, testTagValueRange<double>(tre, reporter,
         &numFields, RADSDA::FIELD84_ + strm.str(), minDouble, maxDouble));

      status = MaxState(status, testTagValueRange<double>(tre, reporter,
         &numFields, RADSDA::FIELD85_ + strm.str(), minDouble, maxDouble));

      status = MaxState(status, testTagValueRange<double>(tre, reporter,
         &numFields, RADSDA::FIELD86_ + strm.str(), minDouble, maxDouble));

      status = MaxState(status, testTagValueRange<double>(tre, reporter,
         &numFields, RADSDA::FIELD87_ + strm.str(), minDouble, maxDouble));

      status = MaxState(status, testTagValueRange<double>(tre, reporter,
         &numFields, RADSDA::FIELD88_ + strm.str(), minDouble, maxDouble));

      status = MaxState(status, testTagValueRange<double>(tre, reporter,
         &numFields, RADSDA::FIELD89_ + strm.str(), minDouble, maxDouble));

      status = MaxState(status, testTagValueRange<double>(tre, reporter,
         &numFields, RADSDA::FIELD90_ + strm.str(), minDouble, maxDouble));

      status = MaxState(status, testTagValueRange<double>(tre, reporter,
         &numFields, RADSDA::FIELD91_ + strm.str(), minDouble, maxDouble));

      status = MaxState(status, testTagValueRange<double>(tre, reporter,
         &numFields, RADSDA::FIELD92_ + strm.str(), minDouble, maxDouble));

      status = MaxState(status, testTagValueRange<double>(tre, reporter,
         &numFields, RADSDA::FIELD93_ + strm.str(), minDouble, maxDouble));
   }

   unsigned int totalFields = tre.getNumAttributes();
   if (status != INVALID && totalFields != numFields)
   {
      reporter << "Total fields in the Dynamic Object(" <<
         totalFields << ") did not match the number found(" << numFields << ") ";
      status = INVALID;
   }

   if (status == INVALID)
   {
      reporter << " INVALID fields found in the RADSDA TAG/SDE\n" ;
   }
   else if (status == SUSPECT)
   {
      reporter << " SUSPECT fields found in the RADSDA TAG/SDE\n" ;
   }

   return status;
}


bool Nitf::RadsdaParser::fromDynamicObject(const DynamicObject& input, ostream& output, size_t& numBytesWritten,
   string &errorMessage) const
{
   size_t sizeIn = max(static_cast<ostream::pos_type>(0), output.tellp());
   size_t sizeOut(sizeIn);

   try
   {
      output << sizeString(dv_cast<string>(input.getAttribute(RADSDA::FIELD1)), 7);
      output << sizeString(dv_cast<string>(input.getAttribute(RADSDA::FIELD2)), 9);
      output << sizeString(dv_cast<string>(input.getAttribute(RADSDA::FIELD3)), 8);
      output << sizeString(dv_cast<string>(input.getAttribute(RADSDA::FIELD4)), 3);
      output << sizeString(dv_cast<string>(input.getAttribute(RADSDA::FIELD5)), 15);
      output << sizeString(dv_cast<string>(input.getAttribute(RADSDA::FIELD6)), 7);
      output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD7)), 5);
      output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD8)), 1);
      output << sizeString(dv_cast<string>(input.getAttribute(RADSDA::FIELD9)), 24);
      output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD10)), 9, -1, ZERO_FILL, POS_SIGN_TRUE);
      output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD11)), 9, -1, ZERO_FILL, POS_SIGN_TRUE);
      output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD12)), 9, -1, ZERO_FILL, POS_SIGN_TRUE);
      output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD13)), 9, -1, ZERO_FILL, POS_SIGN_TRUE);
      output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD14)), 9, -1, ZERO_FILL, POS_SIGN_TRUE);
      output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD15)), 9, -1, ZERO_FILL, POS_SIGN_TRUE);
      output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD16)), 4);
      output << toString(dv_cast<double>(input.getAttribute(RADSDA::FIELD17)), 6, 2, ZERO_FILL, POS_SIGN_TRUE);
      output << toString(dv_cast<double>(input.getAttribute(RADSDA::FIELD18)), 6, 2);
      output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD19)), 4, -1, ZERO_FILL, POS_SIGN_TRUE);
      output << toString(dv_cast<double>(input.getAttribute(RADSDA::FIELD20)), 5, 1, ZERO_FILL, POS_SIGN_TRUE);
      output << toString(dv_cast<double>(input.getAttribute(RADSDA::FIELD21)), 5, 1);
      output << sizeString(dv_cast<string>(input.getAttribute(RADSDA::FIELD22)), 5);

      vector<char> buf;

      buf = dv_cast<vector<char> >(input.getAttribute(RADSDA::FIELD23));
      if (buf.size() != 1536)
      {
         cerr << " Error writing " << RADSDA::FIELD23 << " size == " << buf.size() << " should have been 1536\n";
      }
      output.write(&buf[0], 1536);

      output << sizeString( dv_cast<string>(input.getAttribute (RADSDA::FIELD24)), 5);

      buf = dv_cast<vector<char> >(input.getAttribute(RADSDA::FIELD25));
      if (buf.size() != 1536)
      {
         cerr << " Error writing " << RADSDA::FIELD25 << " size == " << buf.size() << " should have been 1536\n";
      }
      output.write(&buf[0], 1536);

      output << sizeString(dv_cast<string>(input.getAttribute(RADSDA::FIELD26)), 24);
      output << sizeString(dv_cast<string>(input.getAttribute(RADSDA::FIELD27)), 35);
      output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD28)), 2);
      output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD29)), 1);
      output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD30)), 2);
      output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD31)), 1);
      output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD32)), 1);
      output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD33)), 2);
      output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD34)), 1);
      output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD35)), 2);
      output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD36)), 2);
      output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD37)), 1);
      output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD38)), 2);

      int i = 0;
      for (i = 0; i < 50; ++i)
      {
         stringstream strm;
         strm << setw(2) << setfill('0') << i+1;

         output << toString(dv_cast<double>
            (input.getAttribute(RADSDA::FIELD39_ + strm.str())), 6, 2, ZERO_FILL, POS_SIGN_TRUE);

         output << toString(dv_cast<double>
            (input.getAttribute(RADSDA::FIELD40_ + strm.str())), 6, 1);

         output << toString(dv_cast<double>
            (input.getAttribute(RADSDA::FIELD41_ + strm.str())), 6, 1, ZERO_FILL, POS_SIGN_TRUE);

         output << toString(dv_cast<double>
            (input.getAttribute(RADSDA::FIELD42_ + strm.str())), 6, 2);

         output << toString(dv_cast<double>
            (input.getAttribute(RADSDA::FIELD43_ + strm.str())), 5, 3);

         output << toString(dv_cast<double>
            (input.getAttribute(RADSDA::FIELD44_ + strm.str())), 6, 1, ZERO_FILL, POS_SIGN_TRUE);

         output << toString(dv_cast<double>
            (input.getAttribute(RADSDA::FIELD45_ + strm.str())), 6, 2);

         output << toString(dv_cast<double>
            (input.getAttribute(RADSDA::FIELD46_ + strm.str())), 5, 3);
      }

      output << sizeString(dv_cast<string>(input.getAttribute(RADSDA::FIELD47)), 53);

      output << toString(dv_cast<double>(input.getAttribute(RADSDA::FIELD48)), 5, 1);

      output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD49)), 3);

      output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD50)), 4);

      output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD51)), 4);

      output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD52)), 4);

      for (i = 0; i < 9; ++i)
      {
         stringstream strm;
         strm << i+1;

         output << toString(dv_cast<double>(input.getAttribute(RADSDA::FIELD53_ + strm.str())), 9);

         output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD54_ + strm.str())), 7);

         output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD55_ + strm.str())), 7);

         output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD56_ + strm.str())), 7);

         output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD57_ + strm.str())), 7);

         output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD58_ + strm.str())), 2);

         output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD59_ + strm.str())), 2);

         output << sizeString(dv_cast<string>(input.getAttribute(RADSDA::FIELD60_ + strm.str())), 2);

         output << sizeString(dv_cast<string>(input.getAttribute(RADSDA::FIELD61_ + strm.str())), 1);

         output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD62_ + strm.str())), 6, 1);

         output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD63_ + strm.str())), 4, -1,
            ZERO_FILL, POS_SIGN_TRUE);

         output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD64_ + strm.str())), 4, -1,
            ZERO_FILL, POS_SIGN_TRUE);

         output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD65_ + strm.str())), 3);

         output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD66_ + strm.str())), 3);

         output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD67_ + strm.str())), 3);
      }

      output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD68)), 4, -1, ZERO_FILL, POS_SIGN_TRUE);

      output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD69)), 4, -1, ZERO_FILL, POS_SIGN_TRUE);

      output << toString(dv_cast<int>(input.getAttribute(RADSDA::FIELD70)), 3);

      for (i = 0; i < 5; ++i)
      {
         stringstream strm;
         strm << i+1;

         output << toString(dv_cast<double>(input.getAttribute(RADSDA::FIELD71_ + strm.str())), 21, -1,
            ZERO_FILL, POS_SIGN_TRUE, USE_SCIENTIFIC_NOTATION);

         output << toString(dv_cast<double>(input.getAttribute(RADSDA::FIELD72_ + strm.str())), 21, -1,
            ZERO_FILL, POS_SIGN_TRUE, USE_SCIENTIFIC_NOTATION);

         output << toString(dv_cast<double>(input.getAttribute(RADSDA::FIELD73_ + strm.str())), 21, -1,
            ZERO_FILL, POS_SIGN_TRUE, USE_SCIENTIFIC_NOTATION);

         output << toString(dv_cast<double>(input.getAttribute(RADSDA::FIELD74_ + strm.str())), 21, -1,
            ZERO_FILL, POS_SIGN_TRUE, USE_SCIENTIFIC_NOTATION);

         output << toString(dv_cast<double>(input.getAttribute(RADSDA::FIELD75_ + strm.str())), 21, -1,
            ZERO_FILL, POS_SIGN_TRUE, USE_SCIENTIFIC_NOTATION);

         output << toString(dv_cast<double>(input.getAttribute(RADSDA::FIELD76_ + strm.str())), 12, -1,
            ZERO_FILL, POS_SIGN_FALSE, USE_SCIENTIFIC_NOTATION);

         output << toString(dv_cast<double>(input.getAttribute(RADSDA::FIELD77_ + strm.str())), 12, -1,
            ZERO_FILL, POS_SIGN_FALSE, USE_SCIENTIFIC_NOTATION);

         output << toString(dv_cast<double>(input.getAttribute(RADSDA::FIELD78_ + strm.str())), 12, -1,
            ZERO_FILL, POS_SIGN_FALSE, USE_SCIENTIFIC_NOTATION);

         output << toString(dv_cast<double>(input.getAttribute(RADSDA::FIELD79_ + strm.str())), 12, -1,
            ZERO_FILL, POS_SIGN_FALSE, USE_SCIENTIFIC_NOTATION);

         output << toString(dv_cast<double>(input.getAttribute(RADSDA::FIELD80_ + strm.str())), 12, -1,
            ZERO_FILL, POS_SIGN_FALSE, USE_SCIENTIFIC_NOTATION);

         output << toString(dv_cast<double>(input.getAttribute(RADSDA::FIELD81_ + strm.str())), 12, -1,
            ZERO_FILL, POS_SIGN_FALSE, USE_SCIENTIFIC_NOTATION);

         output << toString(dv_cast<double>(input.getAttribute(RADSDA::FIELD82_ + strm.str())), 12, -1,
            ZERO_FILL, POS_SIGN_FALSE, USE_SCIENTIFIC_NOTATION);

         output << toString(dv_cast<double>(input.getAttribute(RADSDA::FIELD83_ + strm.str())), 12, -1,
            ZERO_FILL, POS_SIGN_FALSE, USE_SCIENTIFIC_NOTATION);

         output << toString(dv_cast<double>(input.getAttribute(RADSDA::FIELD84_ + strm.str())), 12, -1,
            ZERO_FILL, POS_SIGN_FALSE, USE_SCIENTIFIC_NOTATION);

         output << toString(dv_cast<double>(input.getAttribute(RADSDA::FIELD85_ + strm.str())), 12, -1,
            ZERO_FILL, POS_SIGN_FALSE, USE_SCIENTIFIC_NOTATION);

         output << toString(dv_cast<double>(input.getAttribute(RADSDA::FIELD86_ + strm.str())), 12, -1,
            ZERO_FILL, POS_SIGN_FALSE, USE_SCIENTIFIC_NOTATION);

         output << toString(dv_cast<double>(input.getAttribute(RADSDA::FIELD87_ + strm.str())), 12, -1,
            ZERO_FILL, POS_SIGN_FALSE, USE_SCIENTIFIC_NOTATION);

         output << toString(dv_cast<double>(input.getAttribute(RADSDA::FIELD88_ + strm.str())), 12, -1,
            ZERO_FILL, POS_SIGN_FALSE, USE_SCIENTIFIC_NOTATION);

         output << toString(dv_cast<double>(input.getAttribute(RADSDA::FIELD89_ + strm.str())), 12, -1,
            ZERO_FILL, POS_SIGN_FALSE, USE_SCIENTIFIC_NOTATION);

         output << toString(dv_cast<double>(input.getAttribute(RADSDA::FIELD90_ + strm.str())), 12, -1,
            ZERO_FILL, POS_SIGN_FALSE, USE_SCIENTIFIC_NOTATION);

         output << toString(dv_cast<double>(input.getAttribute(RADSDA::FIELD91_ + strm.str())), 12, -1,
            ZERO_FILL, POS_SIGN_FALSE, USE_SCIENTIFIC_NOTATION);

         output << toString(dv_cast<double>(input.getAttribute(RADSDA::FIELD92_ + strm.str())), 12, -1,
            ZERO_FILL, POS_SIGN_FALSE, USE_SCIENTIFIC_NOTATION);

         output << toString(dv_cast<double>(input.getAttribute(RADSDA::FIELD93_ + strm.str())), 12, -1,
            ZERO_FILL, POS_SIGN_FALSE, USE_SCIENTIFIC_NOTATION);
      }
   }
   catch (const bad_cast&)
   {
      return false;
   }

   sizeOut = output.tellp();
   numBytesWritten = sizeOut - sizeIn;
   return true;
}
