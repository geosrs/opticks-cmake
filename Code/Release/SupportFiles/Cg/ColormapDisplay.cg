// Colormap display program

// Applies a stretch to the given pixel color
void applyStretch(float4 inputColor,
                  float  dataMax,
                  float  lowerValue,
                  float  upperValue,
              out float4 modifiedColor)
{
   // Currently only a linear raw value stretch is supported
   modifiedColor.r = ((inputColor.r - lowerValue / dataMax) / ((upperValue - lowerValue) / dataMax));
   modifiedColor.a = inputColor.a;
}

void main(in  float2 texCoord     : TEXCOORD0, 
          out float4 outputColor  : COLOR,
          const uniform samplerRECT inputImage,
          const uniform samplerRECT colorMap,
          uniform float             numColors,
          uniform float             dataMax,
          uniform float             lowerValue,
          uniform float             upperValue,
          uniform float             alpha)
{
   // This program expects the source texture to be a single channel texture (either GL_LUMINANCE or GL_RED)
   // with the possibility of an alpha channel
   
   // Get the texture value
   float4 imageColor = texRECT(inputImage, texCoord);

   // Apply the stretch
   float4 stretchColor;
   applyStretch(imageColor, dataMax, lowerValue, upperValue, stretchColor);

   // Clip the stretched data value
   stretchColor.r = clamp(stretchColor.r, 0.0, 1.0);

   // Perform a lookup into the colormap texture
   outputColor.r = texRECT(colorMap, float2(stretchColor.r * numColors, 0.5f)).r;
   outputColor.g = texRECT(colorMap, float2(stretchColor.r * numColors, 0.5f)).g;
   outputColor.b = texRECT(colorMap, float2(stretchColor.r * numColors, 0.5f)).b;
   outputColor.a = (alpha / 255.0f) * texRECT(colorMap, float2(stretchColor.r * numColors, 0.5f)).a;
}
